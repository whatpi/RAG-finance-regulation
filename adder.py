import chromadb
from chromadb.utils import embedding_functions
from dotenv import load_dotenv
import os

load_dotenv()

# 임베딩 함수 설정
google_ef = embedding_functions.GoogleGenerativeAiEmbeddingFunction(api_key=os.getenv("GOOGLE_API_KEY"))

# DB 클라이언트 설정
client = chromadb.PersistentClient(path="project_db")

dc = """
**프로젝트명:** 신개념 P2P 간편결제 및 송금 서비스 'PayGo-Z' 개발 프로젝트

**프로젝트 목표:** 2030 세대를 주 타겟으로 한 직관적이고 빠른 사용자 경험의 P2P 간편결제 및 송금 모바일 애플리케이션 개발. 최소한의 터치로 회원가입부터 송금까지 완료할 수 있는 심리스(Seamless)한 프로세스를 구현하여 시장에 조기 진입하는 것을 목표로 함.

**주요 기능:**
* 연락처 기반 간편 송금
* QR코드 결제 기능
* 거래 내역 조회 및 관리
* 친구 추천 및 리워드 프로그램

**기술 스택:**
* **Backend:** Kotlin, Spring Boot, JPA (Hibernate)
* **Frontend:** Swift (iOS), Kotlin (Android)
* **Database:** MySQL, Redis
* **Infra:** AWS (EC2, S3, RDS)

**예상 출시일:** 2025년 1분기
"""

# 프로젝트 메타데이터 설정
project_metadata = {
    "description": dc
}

# 프로젝트 콜렉션 생성
collection = client.get_or_create_collection(
    name="paygo-z-project",
    metadata=project_metadata,
    # embedding_function=google_ef
)

a = """
**문서명:** `PayGo-Z_인증_및_이체_시스템_설계서_v1.0.docx`

> **문서 내용:**
>
> **1. 인증 정책**
>
> * **1-1. 로그인:** 사용자는 ID/PW 또는 설정된 간편 비밀번호(6자리)를 통해 로그인한다.
> * **1-2. 송금 시 인증:**
>     * 모든 송금 거래 시 간편 비밀번호 입력을 필수로 한다.
>     * **1일 누적 송금액이 100만원을 초과할 경우**, ARS 또는 SMS를 통한 추가 인증을 요구한다. (타행 OTP 인증은 차기 버전에서 지원 검토)
>
> **2. 이체 및 거래 시스템**
>
> * **2-1. 이체 한도:** 1회 200만원, 1일 500만원으로 제한한다.
> * **2-2. 이상거래 탐지 (FDS):**
>     * 초기 버전에서는 주요 거래 패턴(예: 심야시간대 고액 연속 송금, 단기간 내 다수 기기로 접속)을 기반으로 한 **룰 기반의 이상거래 모니터링 시스템**을 적용한다.
>     * 탐지된 이상거래는 관리자 페이지에 알림을 보내며, 운영자가 수동으로 확인 및 조치한다.
>     * (향후 고도화 시 머신러닝 FDS 도입 검토)
>
> **3. 데이터 관리 및 보안**
>
> * **3-1. 정보 암호화:** 주민등록번호, 계좌번호 등 식별 가능한 주요 개인정보 및 거래 데이터는 **데이터베이스 표준 암호화 모듈을 사용**하여 저장한다.
> * **3-2. 접근 제어:** 개발, 운영, QA 등 역할(Role)에 따라 데이터베이스 접근 권한을 차등 부여한다.
> * **3-3. 로그 보관:** 사용자 접속 및 중요 행위(로그인, 송금 등)에 대한 로그는 장애 분석 및 고객 지원을 위해 **최소 1년간 보관**한다.
"""
b = """
> **문서 내용:**
>
> **1. 메인 화면**
>
> * 사용자의 현재 예치금 잔액과 '송금하기', '결제하기' 등 핵심 기능 버튼을 직관적으로 배치한다.
>
> **2. 송금 프로세스 (User Flow)**
>
> * **Step 1:** 메인의 '송금하기' 버튼 터치
> * **Step 2:** 연락처에서 수신자 선택 또는 직접 계좌번호 입력
> * **Step 3:** 송금할 금액 입력
>     * 금액 입력 필드 하단에 '수수료 없음' 문구 상시 노출
> * **Step 4:** '보내기' 버튼 터치
> * **Step 5:** 송금 정보(수신자, 금액)를 최종 확인하는 팝업 노출.
> * **Step 6:** 간편 비밀번호(6자리) 입력 화면으로 전환.
> * **Step 7:** 비밀번호 인증 성공 시 '송금 완료' 화면으로 이동.
>     * **디자인 노트:** 사용자가 복잡함을 느끼지 않도록 추가 인증 절차는 최소화하며, 꼭 필요한 경우(고액 이체 등)에만 나타나도록 설계한다. 현재 기획상으로는 간편 비밀번호 인증만으로 모든 송금 플로우가 완료된다.
>
> **3. 회원 가입 프로세스**
>
> * 휴대폰 본인인증을 통해 간편하게 가입을 완료한다.
> * 최초 1회에 한해 출금 계좌를 등록하며, 이후에는 별도 인증 없이 해당 계좌에서 예치금이 충전된다.
"""

c = """
**문서명:** `PayGo-Z_마케팅_및_프로모션_전략_2024_4Q.pptx`

> **문서 내용:**
>
> **1. 타겟 고객 정의**
>
> * **주요 타겟:** 디지털 기기 사용에 능숙하고 새로운 금융 서비스 수용도가 높은 20대~30대 대학생 및 사회초년생.
> * **확장 타겟:** 40대 직장인 (더치페이, 경조사비 송금 등 특정 용도 중심)
>
> **2. 핵심 메시지**
>
> * "가장 빠르고 편한 용돈 송금"
> * "귀찮은 건 PayGo-Z에게 맡겨"
> * "수수료? 그게 뭔데?"
>
> **3. 4분기 주요 프로모션 계획**
>
> * **런칭 프로모션 (11월~12월):**
>     * '첫 송금은 수수료 평생 무료!' 캠페인
>     * 친구 초대 시 초대한 사람과 받은 사람 모두에게 1,000원 즉시 지급 (최대 10명)
> * **SNS 채널 전략:**
>     * 인스타그램 릴스, 유튜브 숏츠를 활용한 15초 챌린지 광고 집행
>     * 대학생 대상 서포터즈 '페이โก고(PayGoGo)' 1기 모집 및 운영
>
> **4. 성과 측정 지표 (KPI)**
>
> * MAU (월간 활성 사용자 수): 10만 명
> * 신규 가입자 수: 15만 명
> * 재방문율: 40%
"""

summary = """
P2P 간편결제/송금 서비스 'PayGo-Z'의 초기 개발 단계 프로젝트 문서 묶음입니다. 본 번들에는 100만원 이상 거래 시 추가 인증, 룰 기반 FDS 적용 등을 명시한 핵심 **시스템 설계서**와 간편 비밀번호만으로 송금이 완료되는 **UI/UX 기획서**가 포함되어 있습니다. 또한, 2030 타겟의 사용자 확보를 위한 **4분기 마케팅 전략** 문서를 통해 프로젝트의 사업적 방향성을 확인할 수 있습니다.
"""

collection.add(
    documents=[a, b, c, summary],
    ids=["0", "1", "2", "3"],
    metadatas=
        [
            {"bundle_id": 0, "doc_type": "fragment"},
            {"bundle_id": 0, "doc_type": "fragment"},
            {"bundle_id": 0, "doc_type": "fragment"},
            {"bundle_id": 0, "doc_type": "summary"},
        ]
)

print("데이터 추가 완료")

